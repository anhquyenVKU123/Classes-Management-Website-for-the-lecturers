# -*- coding: utf-8 -*-
"""Homework.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1upO4-2LJmGAiK1ZC-VneZ4efKT59TLuc
"""

# Question 1: Write a program to find Perimeter and Area of a Rectangle with integers of Width and Height
width = int(input("Enter the width of the rectangle: "))
height = int(input("Enter the height of the rectangle: "))

perimeter = 2 * (width + height)
area = width * height

print("Perimeter of the rectangle:", perimeter)
print("Area of the rectangle:", area)

# Question 2: Write a program to convert centimeter to decimeter and inch with float centimeter
centimeter = float(input("Enter a value in centimeter: "))

decimeter = centimeter / 10
inch = centimeter / 2.54

print("The value in decimeter is:", decimeter)
print("The value in inch is:", inch)

# Question 3: Write a program to random an integer number and check whether this number having two or three digits
import random
number = random.randint(10, 999)
print("The number is: ",number)
if len(str(number)) == 2:
    print("The number has two digits.")
elif len(str(number)) == 3:
    print("The number has three digits.")

# Question 4: Write a program to random an integer number in range [-100, 100] check whether this number positive or negative number and have two digits.
import random
number = random.randint(-100, 100)
print("The number is: ",number)
if number > 0:
    print("The number is positive.")
else:
    print("The number is negative.")

# Question 5: Write a program to random an integer number in range [10, 150] and normalize it into range [0, 1]
import random
number = random.randint(10, 150)
print("The number is: ",number)
normalized_number = (number - 10) / 140
print("The normalized number is: ",normalized_number)

# Question 6: Write a program to find degree and radian angle between hours and minute hands with integers hour and minite
import math
hour = int(input("Enter the hour(0-12): "))
minute = int(input("Enter the minute(0-59): "))

angle = abs(30 * hour + minute * 0.5 - 6*minute)
print("The degree angle between hours and minute hands is: ",360 - angle)
print("The radian angle between hours and minute hands is: ",math.radians(360 - angle))

# Question 7: Write a program to Solve the quadratic equation x^2 + 5*x + 6 = 0
import math
a = 1
b = 5
c = 6
discriminant = math.sqrt(b**2 - 4*a*c)
if discriminant < 0:
    print("The quadratic equation has no real roots.")
elif discriminant == 0:
    x = -b / (2*a)
    print(f"The solution of the quadratic equation is: {x}")
else:
    x1 = (-b + discriminant) / (2*a)
    x2 = (-b - discriminant) / (2*a)
    print(f"The solution of the quadratic equation is: {x1} & {x2}")

# Question 8: Assume we have a string "Today is Sunday and we don't need to wake up at 6 am".
# Print how many words in the string and check whether number in string. Print position of that number in string
string = "Today is Sunday and we don't need to wake up at 6 am"
words = string.split()
print("The number of words in the string is: ",len(words))
has_number = any(char.isdigit() for char in string)
print("The string has a number: ",has_number)
position = string.find("6")
print("The position of the number in the string is: ",position)

# Question 9: From the keyboard input the student profile including :
# Name of Subject 1,2,3 and Mark of Subject 1,2,3.
# Name of Student and Date of Birth
# And print the profile of these students with Average Mark
subj1 = input("Enter the name of subject 1: ")
mark1 = float(input("Enter the mark of subject 1: "))
subj2 = input("Enter the name of subject 2: ")
mark2 = float(input("Enter the mark of subject 2: "))
subj3 = input("Enter the name of subject 3: ")
mark3 = float(input("Enter the mark of subject 3: "))
name = input("Enter the name of student: ")
dob = input("Enter the date of birth(dd/mm/yyyy): ")
print(f"Name of student: {name}")
print(f"Date of birth: {dob}")
print(f"Average mark: {(mark1 + mark2 + mark3)/3}")

# Question 10: From keyboard input two points with (x,y) and print Euclidean, Manhattan, Cosine distance of points
import math
x1 = int(input("Enter the value of x1: "))
y1 = int(input("Enter the value of y1: "))
x2 = int(input("Enter the value of x2: "))
y2 = int(input("Enter the value of y2: "))
x = x2 - x1
y = y2 - y1
Euclidean = math.sqrt((x**2) + (y**2))
Manhattan = abs(x) + abs(y)
Cosine = math.acos(x/Euclidean)
print(f"Euclidean distance: {Euclidean}")
print(f"Manhattan distance: {Manhattan}")
print(f"Cosine distance: {Cosine}")

# Question 11: Input from keyboards your birthday with day, month year
# and print information about weekday name, month name, and your age now
import datetime
birthday = input("Enter your birthday(dd/mm/yyyy): ")
birthday_convert = datetime.datetime.strptime(birthday, '%d/%m/%Y').date()
today = datetime.date.today()
age = today.year - birthday_convert.year - ((today.month, today.day) < (birthday_convert.month, birthday_convert.day))
weekday = today.strftime('%A')
month = today.strftime('%B')
print(f"Weekday: {weekday}")
print(f"Month: {month}")
print(f"Age: {age}")

# Question 12: Input four lists of Customer, Product, Quantity
# A. Create a DataFrame from three lists above
# B. Seperate column QuantityList to Quantity and Unit
# C. Find customer information who bought Pork over 2kg
import pandas as pd

# Input data
CustomerList = ["John", "John", "Marry", "Marry", "Marry"]
ProductList = ["Beer", "Pork", "Milk", "Vegetable", "Pork"]
QuantityList = ["2 Bottles", "1 kg", "5 boxes", "2 bunches", "3 kg"]

# A. Create a DataFrame
df = pd.DataFrame({
    'Customer': CustomerList,
    'Product': ProductList,
    'Quantity': QuantityList
})

# B. Separate column QuantityList to Quantity and Unit
df[['Quantity', 'Unit']] = df['Quantity'].str.split(' ', n = 1, expand=True)

# C. Find customer information who bought Pork over 2kg
df['Quantity'] = pd.to_numeric(df['Quantity'], errors='coerce')
filtered_df = df.loc[(df['Product'] == 'Pork') & (df['Quantity'] > 2)]

# Print the filtered DataFrame
print("Customer information who bought Pork over 2kg:")
print(filtered_df)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# Tạo dữ liệu người dùng
data = np.array([
    [20, 5, 3, 10],
    [30, 2, 1, 15],
    [25, 10, 5, 12],
    [15, 25, 0, 5],
    [0, 35, 2, 2],
    [2, 30, 8, 7],
    [40, 5, 2, 20],
    [5, 1, 30, 18],
    [8, 10, 25, 10],
    [3, 0, 40, 25]
])

# Tính WCSS cho các giá trị k từ 1 đến 5
wcss = []
for k in range(1, 6):
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(data)
    wcss.append(kmeans.inertia_)

# Vẽ biểu đồ Elbow
plt.plot(range(1, 6), wcss)
plt.title('Phương pháp Elbow')
plt.xlabel('Số cụm k')
plt.ylabel('WCSS')
plt.show()

import numpy as np
from sklearn.cluster import KMeans

# Dữ liệu người dùng: [Video Âm nhạc, Video Phim, Video Học thuật, Tương tác]
data = np.array([
    [20, 5, 3, 10],
    [30, 2, 1, 15],
    [25, 10, 5, 12],
    [15, 25, 0, 5],
    [0, 35, 2, 2],
    [2, 30, 8, 7],
    [40, 5, 2, 20],
    [5, 1, 30, 18],
    [8, 10, 25, 10],
    [3, 0, 40, 25]
])

# Áp dụng K-Means với 3 cụm
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(data)

# Hiển thị nhãn của mỗi người dùng (thuộc cụm nào)
labels = kmeans.labels_
print("Nhãn cụm của mỗi người dùng:", labels)

# Hiển thị centroid của mỗi cụm
centroids = kmeans.cluster_centers_
print("Centroid của mỗi cụm:\n", centroids)

# Dựa trên centroid của từng cụm, bạn có thể xác định được cụm 1, 2, và 3 tương ứng với loại người dùng nào

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

def elbow_method(data, max_k=10):
    """
    Áp dụng phương pháp Elbow để xác định số lượng cụm k tốt nhất.

    Args:
    data (ndarray): Dữ liệu người dùng với các đặc trưng.
    max_k (int): Số lượng k lớn nhất để thử nghiệm.

    Returns:
    wcss (list): Danh sách các giá trị WCSS cho từng k.
    """
    wcss = []

    # Thử nghiệm với các giá trị k từ 1 đến max_k
    for k in range(1, max_k + 1):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(data)
        wcss.append(kmeans.inertia_)  # Lưu giá trị WCSS

    # Vẽ biểu đồ WCSS theo k
    plt.plot(range(1, max_k + 1), wcss, marker='o')
    plt.title('Phương pháp Elbow')
    plt.xlabel('Số lượng cụm k')
    plt.ylabel('WCSS')
    plt.grid()
    plt.show()

    return wcss

def kmeans_clustering(data, k):
    """
    Thực hiện phân cụm K-Means cho dữ liệu người dùng.

    Args:
    data (ndarray): Dữ liệu người dùng với các đặc trưng.
    k (int): Số lượng cụm.

    Returns:
    clusters (ndarray): Mảng gán cụm cho từng điểm dữ liệu.
    centroids (ndarray): Vị trí các centroid.
    """
    # Khởi tạo KMeans
    kmeans = KMeans(n_clusters=k, random_state=42)

    # Fit dữ liệu và gán cụm
    clusters = kmeans.fit_predict(data)

    # Lấy các centroids
    centroids = kmeans.cluster_centers_

    # Vẽ biểu đồ phân cụm
    plt.scatter(data[:, 0], data[:, 1], c=clusters, cmap='viridis')
    plt.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='X', s=200, label='Centroids')
    plt.title('Clustering Users with K-Means')
    plt.xlabel('Video Âm nhạc đã xem')
    plt.ylabel('Video Phim đã xem')
    plt.legend()
    plt.grid()
    plt.show()

    return clusters, centroids

def predict_new_user(new_user, kmeans):
    """
    Dự đoán cụm cho người dùng mới và tính khoảng cách đến các centroid.

    Args:
    new_user (ndarray): Dữ liệu người dùng mới.
    kmeans (KMeans): Đối tượng KMeans đã được huấn luyện.

    Returns:
    cluster (int): Cụm mà người dùng mới thuộc về.
    distances (ndarray): Khoảng cách đến từng centroid.
    """
    # Dự đoán cụm cho người dùng mới
    cluster = kmeans.predict(new_user)

    # Tính khoảng cách từ người dùng mới đến từng centroid
    distances = np.linalg.norm(new_user - kmeans.cluster_centers_, axis=1)

    return cluster[0], distances

# Dữ liệu người dùng (video âm nhạc, video phim, video học thuật, tương tác)
data = np.array([
    [20, 5, 3, 10],   # Người dùng 1
    [30, 2, 1, 15],   # Người dùng 2
    [25, 10, 5, 12],  # Người dùng 3
    [15, 25, 0, 5],   # Người dùng 4
    [0, 35, 2, 2],    # Người dùng 5
    [2, 30, 8, 7],    # Người dùng 6
    [40, 5, 2, 20],   # Người dùng 7
    [5, 1, 30, 18],   # Người dùng 8
    [8, 10, 25, 10],  # Người dùng 9
    [3, 0, 40, 25]    # Người dùng 10
])

# Áp dụng phương pháp Elbow để chọn k
max_k = 10
wcss = elbow_method(data, max_k)

# Giả sử sau khi xem biểu đồ, bạn chọn k = 3
optimal_k = 3

# Gọi hàm để phân cụm với k = optimal_k
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
kmeans.fit(data)
clusters, centroids = kmeans.labels_, kmeans.cluster_centers_

# Dữ liệu người dùng mới
new_user = np.array([[0, 10, 35, 20]])

# Dự đoán cụm cho người dùng mới và khoảng cách đến các centroid
new_cluster, distances = predict_new_user(new_user, kmeans)
print(f'Người dùng mới với dữ liệu {new_user} thuộc cụm: {new_cluster}')

for i, distance in enumerate(distances):
    print(f'Khoảng cách đến Cụm {i + 1}: {distance:.2f}')